{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "SEP DSL",
  "scopeName": "source.sep",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#patterns"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.sep",
          "begin": "//",
          "end": "$"
        }
      ]
    },
    "patterns": {
      "patterns": [
        {
          "name": "meta.pattern.sep",
          "begin": "\\b(pattern)\\s+(\\w+)\\s*(\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.pattern.sep"
            },
            "2": {
              "name": "entity.name.function.pattern.sep"
            },
            "3": {
              "name": "punctuation.definition.block.begin.sep"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.end.sep"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sep",
          "match": "\\b(if|else|pattern|print|true|false)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.builtin.sep",
          "match": "\\b(measure_coherence|measure_entropy|extract_bits|qfh_analyze|manifold_optimize)\\b"
        },
        {
          "name": "meta.function-call.sep",
          "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.sep"
            },
            "2": {
              "name": "punctuation.definition.parameters.begin.sep"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.sep"
            }
          },
          "patterns": [
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#variables"
            },
            {
              "name": "punctuation.separator.parameter.sep",
              "match": ","
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sep",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.sep",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.sep",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.sep",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.comparison.sep",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.sep",
          "match": "(\\+|\\-|\\*|\\/)"
        },
        {
          "name": "keyword.operator.assignment.sep",
          "match": "="
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.sep",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.member.sep",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
