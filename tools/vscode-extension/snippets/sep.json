{
  "Pattern Template": {
    "prefix": "pattern",
    "body": [
      "pattern ${1:pattern_name} {",
      "\t${2:// Pattern implementation}",
      "}"
    ],
    "description": "Create a new SEP DSL pattern"
  },
  "Coherence Analysis": {
    "prefix": "coherence",
    "body": [
      "coherence = measure_coherence(\"${1:data_name}\")"
    ],
    "description": "Measure quantum coherence"
  },
  "Entropy Analysis": {
    "prefix": "entropy", 
    "body": [
      "entropy = measure_entropy(\"${1:data_name}\")"
    ],
    "description": "Measure Shannon entropy"
  },
  "QFH Analysis": {
    "prefix": "qfh",
    "body": [
      "bits = extract_bits(\"${1:data_name}\")",
      "rupture = qfh_analyze(bits)"
    ],
    "description": "Quantum field harmonics analysis"
  },
  "Full Analysis Pattern": {
    "prefix": "fullanalysis",
    "body": [
      "pattern ${1:analysis_name} {",
      "\tcoherence = measure_coherence(\"${2:data_name}\")",
      "\tentropy = measure_entropy(\"${2:data_name}\")",
      "\tbits = extract_bits(\"${2:data_name}\")",
      "\trupture = qfh_analyze(bits)",
      "\t",
      "\tif (coherence > ${3:0.8} && entropy < ${4:0.3}) {",
      "\t\tprint(\"High-quality signal detected\")",
      "\t\tsignal = \"${5:BUY}\"",
      "\t} else {",
      "\t\tsignal = \"${6:HOLD}\"",
      "\t}",
      "}"
    ],
    "description": "Complete analysis pattern template"
  },
  "Conditional Pattern": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// True branch}",
      "} else {",
      "\t${3:// False branch}",
      "}"
    ],
    "description": "If-else conditional statement"
  },
  "Manifold Optimization": {
    "prefix": "manifold",
    "body": [
      "optimized = manifold_optimize(\"${1:pattern}\", ${2:0.8}, ${3:0.9})"
    ],
    "description": "Quantum manifold optimization"
  },
  "Print Debug": {
    "prefix": "print",
    "body": [
      "print(\"${1:Debug message}:\", ${2:variable})"
    ],
    "description": "Print debug statement"
  },
  "Sensor Analysis": {
    "prefix": "sensor",
    "body": [
      "pattern sensor_analysis {",
      "\tcoherence = measure_coherence(\"${1:sensor_data}\")",
      "\tentropy = measure_entropy(\"${1:sensor_data}\")",
      "\t",
      "\tif (coherence > ${2:0.7}) {",
      "\t\tprint(\"Sensor coherence:\", coherence)",
      "\t\tprint(\"Sensor entropy:\", entropy)",
      "\t}",
      "}"
    ],
    "description": "Sensor data analysis pattern"
  },
  "Real-time Processing": {
    "prefix": "realtime",
    "body": [
      "pattern realtime_${1:analysis} {",
      "\tcoherence = measure_coherence(\"${2:live_stream}\")",
      "\t",
      "\tif (coherence > ${3:0.75}) {",
      "\t\t// High coherence - detailed analysis",
      "\t\tentropy = measure_entropy(\"${2:live_stream}\")",
      "\t\tbits = extract_bits(\"${2:live_stream}\")",
      "\t\trupture = qfh_analyze(bits)",
      "\t\t",
      "\t\tprint(\"Detailed analysis complete\")",
      "\t} else {",
      "\t\tprint(\"Low coherence signal\")",
      "\t}",
      "}"
    ],
    "description": "Real-time data processing pattern"
  }
}
