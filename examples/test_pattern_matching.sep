// Pattern Matching Functions Test
// Tests regex and fuzzy matching capabilities

pattern pattern_matching_demo {
    // Regex matching tests
    print("=== Regex Tests ===")
    
    // Test 1: Basic regex match
    text1 = "Hello World 123"
    pattern1 = "\\d+"
    match_result = regex_match(pattern1, text1)
    print("Regex match for numbers:", match_result)
    
    // Test 2: Extract numbers
    extracted = regex_extract(pattern1, text1)
    print("Extracted numbers:", extracted)
    
    // Test 3: Replace text
    replaced = regex_replace("\\d+", "XXX", text1)
    print("Replaced text:", replaced)
    
    // Test 4: Email validation
    email1 = "user@example.com"
    email2 = "invalid-email"
    email_pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    
    valid_email1 = regex_match(email_pattern, email1)
    valid_email2 = regex_match(email_pattern, email2)
    print("Email validation:")
    print("  ", email1, "->", valid_email1)
    print("  ", email2, "->", valid_email2)
    
    print("")
    print("=== Fuzzy Matching Tests ===")
    
    // Test 5: Fuzzy matching
    word1 = "hello"
    word2 = "helo"
    word3 = "world"
    
    fuzzy_result1 = fuzzy_match(word1, word2)
    fuzzy_result2 = fuzzy_match(word1, word3)
    print("Fuzzy match results:")
    print("  '", word1, "' vs '", word2, "':", fuzzy_result1)
    print("  '", word1, "' vs '", word3, "':", fuzzy_result2)
    
    // Test 6: Fuzzy similarity scores
    similarity1 = fuzzy_similarity(word1, word2)
    similarity2 = fuzzy_similarity(word1, word3)
    print("Similarity scores:")
    print("  '", word1, "' vs '", word2, "':", similarity1)
    print("  '", word1, "' vs '", word3, "':", similarity2)
    
    // Test 7: Custom threshold
    threshold = 0.9
    strict_match = fuzzy_match(word1, word2, threshold)
    print("Strict fuzzy match (threshold=0.9):", strict_match)
    
    print("")
    print("=== Advanced Regex Tests ===")
    
    // Test 8: Extract multiple groups
    log_line = "2025-08-03 10:30:45 ERROR: Connection failed"
    log_pattern = "(\\d{4}-\\d{2}-\\d{2}) (\\d{2}:\\d{2}:\\d{2}) (\\w+): (.+)"
    log_parts = regex_extract(log_pattern, log_line)
    print("Log parsing:", log_parts)
    
    // Test 9: Phone number formatting
    phone = "1234567890"
    phone_pattern = "(\\d{3})(\\d{3})(\\d{4})"
    formatted_phone = regex_replace(phone_pattern, "($1) $2-$3", phone)
    print("Formatted phone:", formatted_phone)
}
