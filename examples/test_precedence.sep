// Test advanced operator precedence

pattern test_precedence {
    // Test mathematical precedence: 2 + 3 * 4 should be 14, not 20
    math1: Number = 2 + 3 * 4
    print("2 + 3 * 4 =", math1, "(should be 14)")
    
    // Test parentheses override: (2 + 3) * 4 should be 20
    math2: Number = (2 + 3) * 4
    print("(2 + 3) * 4 =", math2, "(should be 20)")
    
    // Test division and multiplication: 8 / 2 * 3 should be 12 (left-to-right)
    math3: Number = 8 / 2 * 3
    print("8 / 2 * 3 =", math3, "(should be 12)")
    
    // Test complex expression: 2 + 3 * 4 - 5 / 2 should be 11.5
    math4: Number = 2 + 3 * 4 - 5 / 2
    print("2 + 3 * 4 - 5 / 2 =", math4, "(should be 11.5)")
    
    // Test comparison precedence: 2 + 3 > 4 should be true (5 > 4)
    comp1: Bool = 2 + 3 > 4
    print("2 + 3 > 4 =", comp1, "(should be true)")
    
    // Test logical precedence: true && false || true should be true
    // (true && false) || true = false || true = true
    logic1: Bool = true && false || true
    print("true && false || true =", logic1, "(should be true)")
    
    // Test unary precedence: -2 * 3 should be -6, not -(2 * 3)
    unary1: Number = -2 * 3
    print("-2 * 3 =", unary1, "(should be -6)")
    
    // Test complex nested expression
    complex: Number = 1 + 2 * 3 + 4 * 5 - 6 / 2
    print("1 + 2 * 3 + 4 * 5 - 6 / 2 =", complex, "(should be 24)")
    
    // Test function call precedence
    result: Number = abs(-5) + 3 * 2
    print("abs(-5) + 3 * 2 =", result, "(should be 11)")
    
    // Test mixed types with precedence
    mixed: Number = 10 - 3 * 2 + 1
    print("10 - 3 * 2 + 1 =", mixed, "(should be 5)")
}
