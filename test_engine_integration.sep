// Test DSL -> Engine Integration
// This script tests all the builtin functions that bridge to the C++ engine

pattern engine_integration_test {
    function test_engine_integration() {
        print("=== Testing DSL -> Engine Integration ===")
        
        // Test 1: Pattern Analysis
        print("\n1. Testing measure_coherence...")
        let coherence1 = measure_coherence("test_pattern_1")
        print("Coherence for test_pattern_1: " + to_string(coherence1))
        
        let coherence2 = measure_coherence("test_pattern_2")
        print("Coherence for test_pattern_2: " + to_string(coherence2))
        
        // Test 2: Entropy Measurement
        print("\n2. Testing measure_entropy...")
        let entropy1 = measure_entropy("entropy_pattern_1")
        print("Entropy for entropy_pattern_1: " + to_string(entropy1))
        
        // Test 3: Bitstream Extraction
        print("\n3. Testing extract_bits...")
        let bits1 = extract_bits("bitstream_pattern")
        print("Extracted bits: " + bits1)
        
        // Test 4: QFH Analysis
        print("\n4. Testing qfh_analyze...")
        let qfh_result1 = qfh_analyze("11001010")
        print("QFH analysis result: " + to_string(qfh_result1))
        
        let qfh_result2 = qfh_analyze("10101010")
        print("QFH analysis result (alternating): " + to_string(qfh_result2))
        
        // Test 5: Manifold Optimization
        print("\n5. Testing manifold_optimize...")
        let opt_result = manifold_optimize("optimization_target")
        if (opt_result) {
            print("Manifold optimization: SUCCESS")
        } else {
            print("Manifold optimization: FAILED")
        }
        
        print("\n=== Engine Integration Test Complete ===")
        return true
    }
    
    // Run the test
    test_engine_integration()
}
