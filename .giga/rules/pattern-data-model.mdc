---
description: Defines quantum-inspired pattern data structures, coherence metrics, and stability tracking for market analysis
globs: src/quantum/*,src/memory/*,src/engine/*,src/api/*,scripts/*
alwaysApply: false
---


# pattern-data-model

Pattern Data Structure:
```cpp
struct Pattern {
  float coherence;      // Pattern internal consistency
  float stability;      // Resistance to mutation
  float entropy;        // Measure of randomness
  uint32_t generation;  // Evolution count
  Vector4 position;     // Market position vector
  float amplitude;      // Pattern strength
  float phase;         // Market cycle position
}
```

Coherence Metrics:
1. Primary Stability Calculation
```cpp
stability = 0.9f * current_stability + 0.1f * coherence;
coherence *= (1.0f - decay_factor * COHERENCE_DECAY_RATE);
```

2. Pattern Evolution Rules
- Promotion Thresholds:
  * STM -> MTM: coherence > 0.7, generation > 5
  * MTM -> LTM: coherence > 0.9, stability > 0.85
- Demotion triggers when coherence drops below 0.3
- Minimum coherence floor of 0.1 maintained

3. Relationship Tracking
- Entanglement strength between patterns:
  * Spatial proximity (70% weight)
  * Phase correlation (30% weight)
- Maximum 8 relationships per pattern
- Bidirectional relationship maintenance

4. Memory Tier Classification:
```cpp
enum MemoryTier {
  STM,  // Short-term memory
  MTM,  // Medium-term memory
  LTM   // Long-term memory
};
```

Key Files:
- src/quantum/pattern.h
- src/memory/memory_tier.hpp
- src/quantum/quantum_processor.cpp

The pattern data model implements quantum-inspired metrics for financial market analysis, with emphasis on pattern stability, coherence tracking, and multi-tier memory management.

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga pattern-data-model" along with specifying exactly what information was used from this file in a human-friendly way, instead of using kebab-case use normal sentence case.